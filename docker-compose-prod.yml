version: '3.7'

services:
  proxy:
    image: nginx:stable-alpine
    container_name: proxy
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    restart: 'unless-stopped'
    networks:
      - backend
    depends_on:
      - server
  server:
    build:
      context: ./
      target: production-build-stage
      dockerfile: Dockerfile
    container_name: server
    ports:
      - '${PORT}:3000'
    volumes:
      - ./:/app
      - /app/node_modules
    restart: 'unless-stopped'
    networks:
      - backend
    links:
      - postgres
    depends_on:
      - postgres
  notifications:
    build:
      context: ./services/notifications
      target: production-build-stage
      dockerfile: Dockerfile
    container_name: notifications
    ports:
      - '${NS_PORT}:5000'
  zipcodes:
    build:
      context: ./services/zipcodes
      target: production-build-stage
      dockerfile: Dockerfile
    container_name: zipcodes
    ports:
      - '${ZC_PORT}:7000'
  chat:
    build:
      context: ./chats-service
      target: production-build-stage
      dockerfile: Dockerfile
    container_name: chat
    ports:
      - '${CT_PORT}:8000'
  postgres:
#    image: postgres:14.1-alpine
    build:
      context: ./
      target: production-build-stage
      dockerfile: Dockerfile.db
    container_name: postgres
    restart: unless-stopped
    tty: true
    volumes:
      - ${POSTGRES_VOLUMEN_PATH}:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  data:
    driver: local
